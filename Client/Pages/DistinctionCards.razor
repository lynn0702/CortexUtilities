@page "/distinctioncards"
@using System.Text.Json


@inject HttpClient Http

@inherits DriveManager


<div id="SceneCardDemo">
    <div class="p-1">
        <MudButtonGroup>
            <MudButton @onclick="Refresh">Flip</MudButton>
            <MudButton @onclick="Redraw">Draw</MudButton>
@*            <MudButton @onclick="Save">Save</MudButton>
            <MudButton @onclick="Load">Load</MudButton>*@
        </MudButtonGroup>
    </div>
    <div class="grid-3-col desktop">
        @for(var i = 0; i <9; i++)
        {
            var k = i;
            <DistinctionCard @ref="_cards[k]"></DistinctionCard>
        }
    </div>
    

    <div class="single">
        <DistinctionCard @ref="_cards[9]"></DistinctionCard>
    </div>
</div>


@code {
    DistinctionCard[] _cards = new DistinctionCard[10];

    protected override async Task OnInitializedAsync()
    {
    //if (SData?.SceneTestList?.Count == null || SData?.SceneTestList?.Count <= 0)
    //{
    //    SData.SceneTestList = await Http.GetFromJsonAsync<List<CortexSceneTrait>>("SupportData/scenetest.json");
    //}

    }

    protected override void OnInitialized()
    {
    // Subscribe to the StateChanged EventHandler
    //CharacterState.StateChanged +=
    //    OnCounterStateAdvancedStateChanged;
    }
    // This method is fired when the CounterState object
    // invokes its StateHasChanged() method
    // This will cause this control to invoke its own
    // StateHasChanged() method refreshing the page
    // and displaying the updated counter value
    void OnCounterStateAdvancedStateChanged(
        object sender, EventArgs e) => StateHasChanged();

    private void Refresh()
    {
        foreach (var cortexSceneCard in _cards)
        {
            cortexSceneCard.FlipMe();
        }
    }

    private void Redraw()
    {
        foreach (var cortexSceneCard in _cards)
        {
            cortexSceneCard.ReGenerate();
        }
    }

    private async Task Save()
    {
        await SaveJsonFile("DistinctionCards", JsonSerializer.Serialize(_cards), "distinctionCards");
    }

    private async Task Load()
    {
        try
        {
            var files = await GetDriveFiles("distinctionCards");

            _cards = JsonSerializer.Deserialize<DistinctionCard[]>(await GetJsonFile(files.First().FileId));
            await SaveJsonFile("DistinctionCards", JsonSerializer.Serialize(_cards), "distinctionCards");
        }
        catch (Exception exception)
        {
            throw;
        }
    }

}