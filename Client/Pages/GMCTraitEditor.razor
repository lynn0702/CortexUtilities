@page "/gmctraiteditor"
@using DataGridEditMode = Radzen.DataGridEditMode
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Google.Apis.Sheets.v4
@using Google.Apis.Auth.OAuth2
@using Google.Apis.Services

@inject StaticData Data

@inject IHttpClientFactory ClientFactory
@inject IAccessTokenProvider TokenProvider

<MudButton Color="Color.Secondary" OnClick="LoadTest">Load Eidolon</MudButton>


<RadzenButton Icon="add_circle_outline" style="margin-bottom: 10px" Text="Add New GMC Trait" Click="@InsertRow" Disabled=@(traitToInsert != null) />
    <RadzenDataGrid @ref="traitsGrid" AllowFiltering="true" AllowPaging="true" PageSize="5" AllowSorting="true" EditMode="DataGridEditMode.Single"
                Data="@Data.GMCTraitList" TItem="CortexTrait" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow">
        <Columns>
            <RadzenDataGridColumn TItem="CortexTrait" Property="Name" Title="Name">
                <EditTemplate Context="order">
                    <RadzenTextBox @bind-Value="order.Name" Style="width:100%; display: block" Name="Name" />
                    <RadzenRequiredValidator Text="Name is required" Component="Name" Popup="true" />
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="CortexTrait" Property="Type" Title="Type" Width="280px" >
                <EditTemplate Context="order">
                    <RadzenDropDown @bind-Value="order.Type" Data="@TraitTypes" TextProperty="Type" ValueProperty="Type" Style="width:100%; display: block;" />
                </EditTemplate>
            </RadzenDataGridColumn>
            
            <RadzenDataGridColumn TItem="CortexTrait" Property="Subtype" Title="Subtype" Width="280px" >
                <EditTemplate Context="order">
                    <RadzenTextBox @bind-Value="order.Subtype" Name="Subtype" Style="width:100%; display: block;" />
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="CortexTrait" Context="sampleBlazorModelsSampleOrder" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="120px">
@*                <Template Context="order">
                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Class="m-1" Click="@(args => EditRow(order))" @onclick:stopPropagation="true">
                    </RadzenButton>
                </Template>*@
                <EditTemplate Context="order">
                    <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Primary" Class="m-1" Click="@((args) => SaveRow(order))">
                    </RadzenButton>
                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Class="m-1" Click="@((args) => CancelEdit(order))">
                    </RadzenButton>
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="CortexTrait" Context="order" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="60px">
                <Template Context="order">
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Size="ButtonSize.Small" Class="m-1" Click="@(args => DeleteRow(order))" @onclick:stopPropagation="true">
                    </RadzenButton>
                </Template>
                <EditTemplate Context="order">
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Size="ButtonSize.Small" Class="m-1" Click="@(args => DeleteRow(order))">
                    </RadzenButton>
                </EditTemplate>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>

@code {
    RadzenDataGrid<CortexTrait> traitsGrid;

    string[] TraitTypes { get; set; }

    protected override void OnInitialized()
    {
        TraitTypes = Data.GMCTraitList.Select(t => t.Type).Distinct().ToArray();

        base.OnInitialized();
    }

    async Task EditRow(CortexTrait order)
    {
        await traitsGrid.EditRow(order);
    }

    void OnUpdateRow(CortexTrait order)
    {
        if (order == traitToInsert)
        {
            traitToInsert = null;
        }
    }

    async Task SaveRow(CortexTrait order)
    {
        if (order == traitToInsert)
        {
            traitToInsert = null;
        }

        Data.GMCTraitList.Add(order);

        await traitsGrid.UpdateRow(order);
    }

    void CancelEdit(CortexTrait order)
    {
        if (order == traitToInsert)
        {
            traitToInsert = null;
        }

        traitsGrid.CancelEditRow(order);
    }

    async Task DeleteRow(CortexTrait order)
    {
        if (order == traitToInsert)
        {
            traitToInsert = null;
        }

        if (Data.GMCTraitList.Contains(order))
        {
            Data.GMCTraitList.Remove(order);

            await traitsGrid.Reload();
        }
        else
        {
            traitsGrid.CancelEditRow(order);
        }
    }

    CortexTrait traitToInsert;

    async Task InsertRow()
    {
        traitToInsert = new CortexTrait();
        await traitsGrid.InsertRow(traitToInsert);
    }

    void OnCreateRow(CortexTrait order)
    {
        Data.GMCTraitList.Add(order);
    }

    private async Task<SheetsService> GetSheetService()
    {
        var tokenResult = await TokenProvider.RequestAccessToken(
            new AccessTokenRequestOptions
            {
                Scopes = new[] { "https://www.googleapis.com/auth/drive"}
            });

        if (tokenResult.TryGetToken(out var token))
        {
            GoogleCredential credential = GoogleCredential.FromAccessToken(token.Value).CreateScoped(SheetsService.Scope.Drive);

            SheetsService service = new(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApiKey = "AIzaSyAwPqx9N3S7HTuePmZPy0gYx924vY2K9Go",
                ApplicationName = "",
                GZipEnabled = false
            });

            return service;
        }

        return null;
    }

    private async Task LoadTest()
    {
    //try
    //{
    //    var client = ClientFactory.CreateClient("GoogleSheets");

    //   var  examples = 
    //        await client.GetFromJsonAsync<SheetAPIResponse>("https://sheets.googleapis.com/v4/spreadsheets/1ZIDphYyexhUDj17Dm7ewGxHDq7bAfst-02VmfzmyYaA/values/Sheet13!A1:Z1000");
    //    var response = SheetPareser.Traits(examples.values);
    //}
    //catch (AccessTokenNotAvailableException exception)
    //{
    //    exception.Redirect();
    //}
        try
        {
            var sheetService = await GetSheetService();

            var range = $"GMC Traits EA!A:C";
            SpreadsheetsResource.ValuesResource.GetRequest request =
                sheetService.Spreadsheets.Values.Get("1H-FmRXtfDV806OrWqH_u5YC6TPmpQZCiuMHsGF8RvqI", range);
    // Executing Read Operation...
            var response = await request.ExecuteAsync();
     
            Data.GMCTraitList = response.Values.Select(row => new CortexTrait(row.Where(o => o != null).Select(o => o.ToString()).ToArray())).ToList();
            Data.GMCTraitList.RemoveAt(0);

            StateHasChanged();
    //var test2 = await Http.GetFromJsonAsync<SheetAPIResponse>("https://sheets.googleapis.com/v4/spreadsheets/1ZIDphYyexhUDj17Dm7ewGxHDq7bAfst-02VmfzmyYaA/values/Sheet13!A1:Z1000?key=AIzaSyA_vQ6nmcVJyVmX4VVDFxTCjwy3KTZPcR8");

        }
        catch (Exception exception)
        {
            var test = exception;
        }
    }
}