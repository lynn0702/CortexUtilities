@page "/gmctraiteditor"
@using DataGridEditMode = Radzen.DataGridEditMode
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Google.Apis.Sheets.v4
@using Google.Apis.Auth.OAuth2
@using Google.Apis.Services

@inject StaticData Data
@inject HttpClient Http
@inherits DriveManager
@inject IConfiguration config
@inject IAccessTokenProvider TokenProvider

<MudButton Color="Color.Secondary" OnClick="LoadEidolon">Load Eidolon</MudButton>
@if (_driveFiles != null)
{
    <MudSelect T="DriveFile" @bind-Value="@_selectedFile" ToStringFunc="@converter" Label="Select your file" AnchorOrigin="Origin.BottomCenter" Variant="MudBlazor.Variant.Outlined" Clearable>
        @foreach (var item in _driveFiles)
        {
            <MudSelectItem Value="@item">@item.Name</MudSelectItem>
        }
    </MudSelect>
    <MudButton Color="Color.Secondary" OnClick="LoadUserData">Load Selected</MudButton>
}
<MudButton Color="Color.Secondary" OnClick="CreateSheet">Create Sheet</MudButton>


<RadzenButton Icon="add_circle_outline" style="margin-bottom: 10px" Text="Add New GMC Trait" Click="@InsertRow" Disabled=@(traitToInsert != null) />
    <RadzenDataGrid @ref="traitsGrid" AllowFiltering="true" AllowPaging="true" PageSize="5" AllowSorting="true" EditMode="DataGridEditMode.Single"
                Data="@Data.GMCTraitList" TItem="CortexTrait" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow">
        <Columns>
            <RadzenDataGridColumn TItem="CortexTrait" Property="Name" Title="Name">
                <EditTemplate Context="order">
                    <RadzenTextBox @bind-Value="order.Name" Style="width:100%; display: block" Name="Name" />
                    <RadzenRequiredValidator Text="Name is required" Component="Name" Popup="true" />
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="CortexTrait" Property="Type" Title="Type" Width="280px" >
                <EditTemplate Context="order">
                    <RadzenDropDown @bind-Value="order.Type" Data="@TraitTypes" TextProperty="Type" ValueProperty="Type" Style="width:100%; display: block;" />
                </EditTemplate>
            </RadzenDataGridColumn>
            
            <RadzenDataGridColumn TItem="CortexTrait" Property="Subtype" Title="Subtype" Width="280px" >
                <EditTemplate Context="order">
                    <RadzenTextBox @bind-Value="order.Subtype" Name="Subtype" Style="width:100%; display: block;" />
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="CortexTrait" Context="sampleBlazorModelsSampleOrder" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="120px">
@*                <Template Context="order">
                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Class="m-1" Click="@(args => EditRow(order))" @onclick:stopPropagation="true">
                    </RadzenButton>
                </Template>*@
                <EditTemplate Context="order">
                    <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Primary" Class="m-1" Click="@((args) => SaveRow(order))">
                    </RadzenButton>
                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Class="m-1" Click="@((args) => CancelEdit(order))">
                    </RadzenButton>
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="CortexTrait" Context="order" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="60px">
                <Template Context="order">
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Size="ButtonSize.Small" Class="m-1" Click="@(args => DeleteRow(order))" @onclick:stopPropagation="true">
                    </RadzenButton>
                </Template>
                <EditTemplate Context="order">
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Size="ButtonSize.Small" Class="m-1" Click="@(args => DeleteRow(order))">
                    </RadzenButton>
                </EditTemplate>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>

@code {
    RadzenDataGrid<CortexTrait> traitsGrid;

    string[] TraitTypes { get; set; }

    DriveFile _selectedFile;

    protected override void OnInitialized()
    {
        TraitTypes = Data.GMCTraitList.Select(t => t.Type).Distinct().ToArray();

        base.OnInitialized();
    }

    async Task EditRow(CortexTrait order)
    {
        await traitsGrid.EditRow(order);
    }

    void OnUpdateRow(CortexTrait order)
    {
        if (order == traitToInsert)
        {
            traitToInsert = null;
        }
    }

    async Task SaveRow(CortexTrait order)
    {
        if (order == traitToInsert)
        {
            traitToInsert = null;
        }

        Data.GMCTraitList.Add(order);

        await traitsGrid.UpdateRow(order);
    }

    void CancelEdit(CortexTrait order)
    {
        if (order == traitToInsert)
        {
            traitToInsert = null;
        }

        traitsGrid.CancelEditRow(order);
    }

    async Task DeleteRow(CortexTrait order)
    {
        if (order == traitToInsert)
        {
            traitToInsert = null;
        }

        if (Data.GMCTraitList.Contains(order))
        {
            Data.GMCTraitList.Remove(order);

            await traitsGrid.Reload();
        }
        else
        {
            traitsGrid.CancelEditRow(order);
        }
    }

    CortexTrait traitToInsert;

    async Task InsertRow()
    {
        traitToInsert = new CortexTrait();
        await traitsGrid.InsertRow(traitToInsert);
    }

    void OnCreateRow(CortexTrait order)
    {
        Data.GMCTraitList.Add(order);
    }

    private async void LoadEidolon()
    {
        var source = await Http.GetFromJsonAsync<SheetAPIResponse>("https://sheets.googleapis.com/v4/spreadsheets/1H-FmRXtfDV806OrWqH_u5YC6TPmpQZCiuMHsGF8RvqI/values/GMCTraitsEA!A1:Z1000?key=" + config["googleAPIKey"]);

        Data.GMCTraitList = source.values.Select(row => new CortexTrait(row.Where(o => o != null).Select(o => o.ToString()).ToArray())).ToList();
        Data.GMCTraitList.RemoveAt(0); //remove header, todo make a variable/checkbox

        StateHasChanged();
    }

    private async void LoadUserData()
    {
        var source = await FetchSheetData(_selectedFile.FileId, "A:D"); 
        Data.GMCTraitList = source.Select(row => new CortexTrait(row.Where(o => o != null).Select(o => o.ToString()).ToArray())).ToList();
        Data.GMCTraitList.RemoveAt(0); //remove header, todo make a variable/checkbox

        StateHasChanged();
    }
}