@page "/scenetraiteditor"
@using DataGridEditMode = Radzen.DataGridEditMode
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Color = MudBlazor.Color

@inject StaticData Data
@inject NavigationManager Navigation
@inject HttpClient Http

@inject IAccessTokenProvider TokenProvider

@inherits DriveManager

<MudButton Color="Color.Secondary" OnClick="LoadEidolon">Load Eidolon</MudButton>
@if (_driveFiles != null)
{
    <MudSelect T="DriveFile" @bind-Value="@selectedFile" ToStringFunc="@converter" Label="Select your file" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined" Clearable>
        @foreach (var item in _driveFiles)
        {
            <MudSelectItem Value="@item">@item.Name</MudSelectItem>
        }
    </MudSelect>
    <MudButton Color="Color.Secondary" OnClick="LoadUserData">Load Selected</MudButton>
}
<MudButton Color="Color.Secondary" OnClick="CreateSheet">Create Sheet</MudButton>

<RadzenButton Icon="add_circle_outline" style="margin-bottom: 10px" Text="Add New Scene Trait" Click="@InsertRow" Disabled="@(traitToInsert != null)" />
    <RadzenDataGrid @ref="scenetraitsGrid" AllowFiltering="true" AllowPaging="true" PageSize="5" AllowSorting="true" EditMode="DataGridEditMode.Single"
                Data="@Data.SceneTraitList" TItem="CortexSceneTrait" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow">
        <Columns>
            <RadzenDataGridColumn TItem="CortexSceneTrait" Property="Name" Title="Name">
                <EditTemplate Context="order">
                    <RadzenTextBox @bind-Value="order.Name" Style="width:100%; display: block" Name="Name" />
                    <RadzenRequiredValidator Text="Name is required" Component="Name" Popup="true" />
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="CortexSceneTrait" Property="Type" Title="Type" Width="280px" >
                <EditTemplate Context="order">
                    <RadzenDropDown @bind-Value="order.Type" Data="@traitTypes" TextProperty="Type" ValueProperty="Type" Style="width:100%; display: block;" />
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="CortexSceneTrait" Context="sampleBlazorModelsSampleOrder" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="120px">
@*                <Template Context="order">
                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Class="m-1" Click="@(args => EditRow(order))" @onclick:stopPropagation="true">
                    </RadzenButton>
                </Template>*@
                <EditTemplate Context="order">
                    <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Primary" Class="m-1" Click="@((args) => SaveRow(order))">
                    </RadzenButton>
                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Class="m-1" Click="@((args) => CancelEdit(order))">
                    </RadzenButton>
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="CortexSceneTrait" Context="order" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="60px">
                <Template Context="order">
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Size="ButtonSize.Small" Class="m-1" Click="@(args => DeleteRow(order))" @onclick:stopPropagation="true">
                    </RadzenButton>
                </Template>
                <EditTemplate Context="order">
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Size="ButtonSize.Small" Class="m-1" Click="@(args => DeleteRow(order))">
                    </RadzenButton>
                </EditTemplate>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>

@code {
    RadzenDataGrid<CortexSceneTrait> scenetraitsGrid;

    string fileId = "";

    DriveFile selectedFile;

    string[] traitTypes = new[] {"Title", "Agent", "Asset", "Trait"};

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    async Task EditRow(CortexSceneTrait order)
    {
        await scenetraitsGrid.EditRow(order);
    }

    void OnUpdateRow(CortexSceneTrait order)
    {
        if (order == traitToInsert)
        {
            traitToInsert = null;
        }
    }

    async Task SaveRow(CortexSceneTrait order)
    {
        if (order == traitToInsert)
        {
            traitToInsert = null;
        }

        Data.SceneTraitList.Add(order);

        await scenetraitsGrid.UpdateRow(order);
    }

    void CancelEdit(CortexSceneTrait order)
    {
        if (order == traitToInsert)
        {
            traitToInsert = null;
        }

        scenetraitsGrid.CancelEditRow(order);
    }

    async Task DeleteRow(CortexSceneTrait order)
    {
        if (order == traitToInsert)
        {
            traitToInsert = null;
        }

        if (Data.SceneTraitList.Contains(order))
        {
            Data.SceneTraitList.Remove(order);

            await scenetraitsGrid.Reload();
        }
        else
        {
            scenetraitsGrid.CancelEditRow(order);
        }
    }

    CortexSceneTrait traitToInsert;

    async Task InsertRow()
    {
        traitToInsert = new CortexSceneTrait();
        await scenetraitsGrid.InsertRow(traitToInsert);
    }

    void OnCreateRow(CortexSceneTrait order)
    {
        Data.SceneTraitList.Add(order);

    }

    private async void LoadEidolon()
    {
        var source = await Http.GetFromJsonAsync<SheetAPIResponse>("https://sheets.googleapis.com/v4/spreadsheets/1H-FmRXtfDV806OrWqH_u5YC6TPmpQZCiuMHsGF8RvqI/values/SceneTraitsEA!A1:Z1000?key=AIzaSyA_vQ6nmcVJyVmX4VVDFxTCjwy3KTZPcR8");

        Data.SceneTraitList = source.values.Select(row => new CortexSceneTrait(row.Where(o => o != null).Select(o => o.ToString()).ToArray())).ToList();
        Data.SceneTraitList.RemoveAt(0); //remove header, todo make a variable/checkbox

        StateHasChanged();
    }

    private async void LoadUserData()
    {
        var source = await FetchSheetData(selectedFile.FileId, "A:C"); 
        Data.SceneTraitList = source.Select(row => new CortexSceneTrait(row.Where(o => o != null).Select(o => o.ToString()).ToArray())).ToList();
        Data.SceneTraitList.RemoveAt(0); //remove header, todo make a variable/checkbox

        StateHasChanged();
    }

}