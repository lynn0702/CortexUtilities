@page "/distinctiontraiteditor"
@using DataGridEditMode = Radzen.DataGridEditMode
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Color = MudBlazor.Color

@inject StaticData Data
@inject NavigationManager Navigation
@inject HttpClient Http
@inject IConfiguration config
@inject IAccessTokenProvider TokenProvider

@inherits DriveManager

@if (_driveFiles != null)
{
    <MudSelect T="DriveFile" @bind-Value="@_selectedFile" ToStringFunc="@converter" Label="Select your file" AnchorOrigin="Origin.BottomCenter" Variant="MudBlazor.Variant.Outlined" Clearable>
        @foreach (var item in _driveFiles)
        {
            <MudSelectItem Value="@item">@item.Name</MudSelectItem>
        }
    </MudSelect>
    <MudButton Color="Color.Secondary" OnClick="LoadUserData">Load Selected</MudButton>
    <MudButton Color="Color.Secondary" OnClick="LoadPublicUri">Load Public</MudButton>
}
<MudButton Color="Color.Secondary" OnClick="CreateSheet">New Sheet</MudButton>

<MudOverlay Visible="_isOverlayVisible" DarkBackground="true" Absolute="true">
    <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
</MudOverlay>

<RadzenButton Icon="add_circle_outline" style="margin-bottom: 10px" Text="Add New Distinction Trait" Click="@InsertRow" Disabled="@(traitToInsert != null)" />
    <RadzenDataGrid @ref="_distinctionTraitsGrid" AllowFiltering="true" AllowPaging="true" PageSize="5" AllowSorting="true" EditMode="DataGridEditMode.Single"
                Data="@Data.DistinctionTraitList" TItem="CortexTrait" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow">
        <Columns>
            <RadzenDataGridColumn TItem="CortexTrait" Property="Name" Title="Name">
                <EditTemplate Context="order">
                    <RadzenTextBox @bind-Value="order.Name" Style="width:100%; display: block" Name="Name" />
                    <RadzenRequiredValidator Text="Name is required" Component="Name" Popup="true" />
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="CortexTrait" Property="Type" Title="Type" Width="280px" >
                <EditTemplate Context="order">
                    <RadzenDropDown @bind-Value="order.Type" Data="@_traitTypes" TextProperty="Type" ValueProperty="Type" Style="width:100%; display: block;" />
                    <RadzenRequiredValidator Text="Type is required" Component="Name" Popup="true" />
                </EditTemplate>
            </RadzenDataGridColumn>
            
            <RadzenDataGridColumn TItem="CortexTrait" Property="Subtype" Title="Subtype" Width="280px" >
                <EditTemplate Context="order">
                    <RadzenDropDown @bind-Value="order.Type" Data="@_traitSubtypes" TextProperty="Subtype" ValueProperty="Subtype" Style="width:100%; display: block;" />
                </EditTemplate>
            </RadzenDataGridColumn>
            
            <RadzenDataGridColumn TItem="CortexTrait" Property="RelatedTo" Title="RelatedTo">
                <EditTemplate Context="order">
                    <RadzenTextBox @bind-Value="order.RelatedTo" Style="width:100%; display: block" Name="RelatedTo" />
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="CortexTrait" Context="sampleBlazorModelsSampleOrder" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="120px">
@*                <Template Context="order">
                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Class="m-1" Click="@(args => EditRow(order))" @onclick:stopPropagation="true">
                    </RadzenButton>
                </Template>*@
                <EditTemplate Context="order">
                    <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Primary" Class="m-1" Click="@((args) => SaveRow(order))">
                    </RadzenButton>
                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Class="m-1" Click="@((args) => CancelEdit(order))">
                    </RadzenButton>
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="CortexTrait" Context="order" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="60px">
                <Template Context="order">
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Size="ButtonSize.Small" Class="m-1" Click="@(args => DeleteRow(order))" @onclick:stopPropagation="true">
                    </RadzenButton>
                </Template>
                <EditTemplate Context="order">
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Size="ButtonSize.Small" Class="m-1" Click="@(args => DeleteRow(order))">
                    </RadzenButton>
                </EditTemplate>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>

@code {
    RadzenDataGrid<CortexTrait> _distinctionTraitsGrid;
    private bool _isOverlayVisible;

    string fileId = "";

    DriveFile _selectedFile;

    readonly string[] _traitTypes = new[] {"Distinction", "Description", "SFX"};

    readonly string[] _traitSubtypes = new[] {"Noun", "Adjective", "Preposition"};

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    async Task EditRow(CortexTrait order)
    {
        await _distinctionTraitsGrid.EditRow(order);
    }

    void OnUpdateRow(CortexTrait order)
    {
        if (order == traitToInsert)
        {
            traitToInsert = null;
        }
    }

    async Task SaveRow(CortexTrait order)
    {
        if (order == traitToInsert)
        {
            traitToInsert = null;
        }

        Data.DistinctionTraitList.Add(order);

        await _distinctionTraitsGrid.UpdateRow(order);
    }

    void CancelEdit(CortexTrait order)
    {
        if (order == traitToInsert)
        {
            traitToInsert = null;
        }

        _distinctionTraitsGrid.CancelEditRow(order);
    }

    async Task DeleteRow(CortexTrait order)
    {
        if (order == traitToInsert)
        {
            traitToInsert = null;
        }

        if (Data.DistinctionTraitList.Contains(order))
        {
            Data.DistinctionTraitList.Remove(order);

            await _distinctionTraitsGrid.Reload();
        }
        else
        {
            _distinctionTraitsGrid.CancelEditRow(order);
        }
    }

    CortexTrait traitToInsert;

    async Task InsertRow()
    {
        traitToInsert = new CortexTrait();
        await _distinctionTraitsGrid.InsertRow(traitToInsert);
    }

    void OnCreateRow(CortexTrait order)
    {
        Data.DistinctionTraitList.Add(order);

    }

    private async void LoadUserData()
    {
        _isOverlayVisible = true;
        var source = await FetchSheetData(_selectedFile.FileId, "A:D"); 
        Data.DistinctionTraitList = source.Select(row => new CortexTrait(row.Where(o => o != null).Select(o => o.ToString()).ToArray())).ToList();
        Data.DistinctionTraitList.RemoveAt(0); //remove header, todo make a variable/checkbox

        _isOverlayVisible = false;
        StateHasChanged();
    }

    private async void LoadPublicUri()
    {
        _isOverlayVisible = true;
        var source = await Http.GetFromJsonAsync<SheetAPIResponse>("https://sheets.googleapis.com/v4/spreadsheets/1H-FmRXtfDV806OrWqH_u5YC6TPmpQZCiuMHsGF8RvqI/values/A:C?key=" + config["googleAPIKey"]);

        Data.DistinctionTraitList = source.values.Select(row => new CortexTrait(row.Where(o => o != null).Select(o => o.ToString()).ToArray())).ToList();
        Data.DistinctionTraitList.RemoveAt(0); //remove header, todo make a variable/checkbox

        _isOverlayVisible = false;
        StateHasChanged();
    }

}