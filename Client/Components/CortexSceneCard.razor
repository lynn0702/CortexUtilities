@using System.ComponentModel
@using System.IO.IsolatedStorage
@using System.CodeDom.Compiler

@inject StaticData _sData

<div class="card-container">
    <div class="card-flip @FlipCss">
        <div class="sceneCard paleWoodGradient card front " @onclick="FlipMe">
            @{
                <div class="LeftIcon">
                    <svg viewBox="0 0 256 256" style="height: 100%;">
                        <path transform="scale(0.5, 0.5)" stroke-width="8" stroke-opacity="1" stroke="#4a4a4a" fill-opacity="1"
                              d="@StaticDataExtensions.GetShapePath(Scene.SettingTraits[0])"
                              fill="@StaticDataExtensions.GetFillColor(Scene.SettingTraits[1])">
                        </path>
                    </svg>
                </div>

                <div class="LeftEdge">
                    @Scene.SettingTraits[1]
                </div>
            }
            <div class="SceneTitle">
                <div class="Top-Edge">
                    @Scene.SettingTraits[0]
                </div>

                <div class="Title-Bar tarotCardTitle">@Scene.Title</div>

                <div class="Rating-Bar">
                    @{
                        for (var i = 0; i < Scene.PoolQuantity; i++)
                        {
                            <CortexDice die="Scene.PoolDieSize"></CortexDice>
                        }
                    }
                </div>
            </div>

            @{
                for (var i = 0; i < Scene.TraitCount; i++)
                {
                    <div class="Trait-@(i + 1) grid-auto-col">
                        <div class="Trait-Header">
                            <text>@(Scene.SceneTraits?.ElementAtOrDefault(i)?.Name)</text>
                            <CortexDice die="Scene.SceneTraits?.ElementAtOrDefault(i)?.Rating ?? 0"></CortexDice>
                        </div>
                        
                        @if (Scene.SceneTraits?.ElementAtOrDefault(i)?.Type == "Agents")
                        {
                            <div class="Trait-Footer">
                            @if (Scene.SceneTraits?.ElementAtOrDefault(i)?.HasTrait == true)
                            {
                                <text>@(Scene.SceneTraits?.ElementAtOrDefault(i)?.TraitName)</text>
                                <CortexDice css="diceIconSub" die="Scene.SceneTraits?.ElementAtOrDefault(i)?.TraitRating ?? 0"></CortexDice>
                            }

                            @if (Scene.SceneTraits?.ElementAtOrDefault(i)?.HasAsset == true)
                            {
                                <text>@(Scene.SceneTraits?.ElementAtOrDefault(i)?.AssetName)</text>
                                <CortexDice css="diceIconSub" die="Scene.SceneTraits?.ElementAtOrDefault(i)?.AssetRating ?? 0"></CortexDice>
                            }
                        </div>
                        }
                    </div>
                }
            }

            @{
                <div class="RightEdge">
                    @Scene.SettingTraits[2]
                </div>

                <div class="BottomEdge">
                    @Scene.SettingTraits[3]
                </div>

                <div class="RightIcon">
                    <svg viewBox="0 0 256 256" style="height: 100%;">
                        <path transform="scale(0.5, 0.5)" stroke-width="8" stroke-opacity="1" stroke="#4a4a4a" fill-opacity="1"
                              d="@StaticDataExtensions.GetShapePath(Scene.SettingTraits[3])"
                              fill="@StaticDataExtensions.GetFillColor(Scene.SettingTraits[2])">
                        </path>
                    </svg>
                </div>
            }
        </div>
    
        @if (_flipped)
        {
            <!-- Card 2 Back -->
            <div class="sceneCardBack paleWoodGradient card back " @onclick="FlipMe">
                <figure style="align-self:center">
                    <img src="images/doorway.svg" alt="door"/>
                </figure>
            </div>
            <!-- End Card 2 Back -->
        }

    </div>
</div>

@code {
    Random _random = new Random();
    CortexScene Scene { get; set; }

    protected override void OnInitialized()
    {
        Scene = Generate();
        base.OnInitialized();
    }

    private IEnumerable<CortexSceneTrait> GetTraitOptions(string type)
    {
        return string.IsNullOrEmpty(type) ? _sData.SceneTestList : _sData.SceneTestList.Where(t => t.Type == type);
    }

    public CortexSceneTrait? GetRandomTrait(string type)
    {
        if (_sData.SceneTestList == null) return new CortexSceneTrait
        {
            Name = "List Empty"
        };

        var c = _sData.SceneTestList.Count == 0 ? 0 : _sData.SceneTestList.Count - 1;

        if (string.IsNullOrEmpty(type)) return _sData.SceneTestList.ElementAtOrDefault(_random.Next(0,c));

        var list = _sData.SceneTestList.Where(t => t.Type == type).ToArray();
        c = !list.Any() ? 0 : list.Count() - 1;

        return list.ElementAtOrDefault(_random.Next( 0, c));
    }

    private IEnumerable<CortexSceneTrait> GetRandomSceneTraits(string[] types, int count)
    {
        if (_sData.SceneTestList == null) return new List<CortexSceneTrait>();

        return types.Length == 0 
            ? _sData.SceneTestList.GetRandomElements(count) 
            : _sData.SceneTestList.Where(t => types.Contains( t.Type)).GetRandomElements(count);
    }

    bool _flipped = true;
    public void FlipMe()
    {
        _flipped = !_flipped;
        StateHasChanged();
    }
    string FlipCss => _flipped ? "im-flipped" : "";

    public CortexScene Generate()
    {
        var scene = new CortexScene
        {
            Title = GetRandomTrait("Title")?.Name,
            TraitCount = _random.Next(0, 6),
            PoolQuantity = _random.Next(2, 7),
            PoolDieSize = _random.Next(3, 7) * 2,
            SettingTraits = StaticDataExtensions.ShapeDescriptors.ToList().GetRandomElements(4).ToArray()
        };
        scene.SceneTraits = GetRandomSceneTraits(new[] {"Agents", "Assets"}, scene.TraitCount).ToList();


        foreach (var cortexSceneTrait in scene.SceneTraits)
        {
             cortexSceneTrait.Rating  = _random.Next(3, 7)*2;
             cortexSceneTrait.HasTrait = _random.Next(0, 2) == 0;
             cortexSceneTrait.TraitRating = _random.Next(2, 7)*2;
             cortexSceneTrait.HasAsset = _random.Next(0, 2)  == 0;
             cortexSceneTrait.AssetRating = _random.Next(2, 7)*2;

            var traitRandomizer = _random.Next(0, 5);

            if (traitRandomizer > scene.SettingTraits?.Length)
            {
                var test = "how in te world??";
            }
            else
            {
                cortexSceneTrait.TraitName = scene.SettingTraits[_random.Next(0, 4)];
            }
             
            cortexSceneTrait.AssetName = GetRandomTrait("Assets")?.Name;
        }

        return scene;
    }

    public void ReGenerate()
    {
        Scene = Generate();
        StateHasChanged();
    }

}

